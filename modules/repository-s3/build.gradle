import org.apache.tools.ant.filters.ReplaceTokens
import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.test.RestIntegTestTask
import org.elasticsearch.gradle.internal.test.rest.LegacyYamlRestTestPlugin
import org.elasticsearch.gradle.internal.test.InternalClusterTestPlugin

import static org.elasticsearch.gradle.PropertyNormalization.IGNORE_VALUE

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
apply plugin: 'elasticsearch.internal-yaml-rest-test'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.test-fixture-application-consumer'

esplugin {
  description 'The S3 repository plugin adds S3 repositories'
  classname 'org.elasticsearch.repositories.s3.S3RepositoryPlugin'
}

versions << [
  'aws': '1.12.270'
]

configurations {
  yamlRestTestRuntimeClasspath.exclude module: 'org.hamcrest:hamcrest-core'
  internalClusterTestRuntime.exclude module: 'org.elasticsearch:minio-fixture'
}

dependencies {
  api "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
  api "com.amazonaws:aws-java-sdk-core:${versions.aws}"
  api "com.amazonaws:aws-java-sdk-sts:${versions.aws}"
  api "com.amazonaws:jmespath-java:${versions.aws}"
  api "org.apache.httpcomponents:httpclient:${versions.httpclient}"
  api "org.apache.httpcomponents:httpcore:${versions.httpcore}"
  api "commons-logging:commons-logging:${versions.commonslogging}"
  api "org.apache.logging.log4j:log4j-1.2-api:${versions.log4j}"
  api "commons-codec:commons-codec:${versions.commonscodec}"
  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  api "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
  api "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jackson}"
  api "joda-time:joda-time:2.10.14"

  // HACK: javax.xml.bind was removed from default modules in java 9, so we pull the api in here,
  // and whitelist this hack in JarHell
  api 'javax.xml.bind:jaxb-api:2.2.2'

  testImplementation project(':test:fixtures:s3-fixture')
  yamlRestTestImplementation "junit:junit:${versions.junit}"
  yamlRestTestImplementation testFixtures(project(':test:fixtures:s3-fixture'))
  yamlRestTestImplementation testFixtures(project(':test:fixtures:minio-fixture'))

  internalClusterTestImplementation testFixtures(project(':test:fixtures:minio-fixture'))

  fixtureDistributions project(':test:fixtures:s3-fixture')
  fixtureDistributions project(':test:fixtures:minio-fixture')
}

restResources {
  restApi {
    include '_common', 'cluster', 'nodes', 'snapshot','indices', 'index', 'bulk', 'count'
  }
}

tasks.named("dependencyLicenses").configure {
  mapping from: /aws-java-sdk-.*/, to: 'aws-java-sdk'
  mapping from: /jmespath-java.*/, to: 'aws-java-sdk'
  mapping from: /jackson-.*/, to: 'jackson'
  mapping from: /jaxb-.*/, to: 'jaxb'
}

esplugin.bundleSpec.from('config/repository-s3') {
    into 'config'
}

def testRepositoryCreds = tasks.register("testRepositoryCreds", Test) {
  include '**/RepositoryCredentialsTests.class'
  systemProperty 'es.allow_insecure_settings', 'true'
  classpath = sourceSets.test.runtimeClasspath
  testClassesDirs = sourceSets.test.output.classesDirs
}

tasks.named('check').configure {
  dependsOn(testRepositoryCreds)
}

tasks.named('test').configure {
  // this is tested explicitly in separate test tasks
  exclude '**/RepositoryCredentialsTests.class'
}

boolean useFixture = false

// We test against two repositories, one which uses the usual two-part "permanent" credentials and
// the other which uses three-part "temporary" or "session" credentials.

String s3PermanentAccessKey = System.getenv("amazon_s3_access_key")
String s3PermanentSecretKey = System.getenv("amazon_s3_secret_key")
String s3PermanentBucket = System.getenv("amazon_s3_bucket")
String s3PermanentBasePath = System.getenv("amazon_s3_base_path")

String s3TemporaryAccessKey = System.getenv("amazon_s3_access_key_temporary")
String s3TemporarySecretKey = System.getenv("amazon_s3_secret_key_temporary")
String s3TemporarySessionToken = System.getenv("amazon_s3_session_token_temporary")
String s3TemporaryBucket = System.getenv("amazon_s3_bucket_temporary")
String s3TemporaryBasePath = System.getenv("amazon_s3_base_path_temporary")

String s3EC2Bucket = System.getenv("amazon_s3_bucket_ec2")
String s3EC2BasePath = System.getenv("amazon_s3_base_path_ec2")

String s3ECSBucket = System.getenv("amazon_s3_bucket_ecs")
String s3ECSBasePath = System.getenv("amazon_s3_base_path_ecs")

String s3STSBucket = System.getenv("amazon_s3_bucket_sts")
String s3STSBasePath = System.getenv("amazon_s3_base_path_sts")

boolean s3DisableChunkedEncoding = BuildParams.random.nextBoolean()

// If all these variables are missing then we are testing against the internal fixture instead, which has the following
// credentials hard-coded in.

if (!s3PermanentAccessKey && !s3PermanentSecretKey && !s3PermanentBucket && !s3PermanentBasePath) {
  s3PermanentAccessKey = 's3_test_access_key'
  s3PermanentSecretKey = 's3_test_secret_key'
  s3PermanentBucket = 'bucket'
  s3PermanentBasePath = 'base_path'

  //apply plugin: 'elasticsearch.test.fixtures'
  useFixture = true

} else if (!s3PermanentAccessKey || !s3PermanentSecretKey || !s3PermanentBucket || !s3PermanentBasePath) {
  throw new IllegalArgumentException("not all options specified to run against external S3 service as permanent credentials are present")
}

if (!s3TemporaryAccessKey && !s3TemporarySecretKey && !s3TemporaryBucket && !s3TemporaryBasePath && !s3TemporarySessionToken) {
  s3TemporaryAccessKey = 'session_token_access_key'
  s3TemporarySecretKey = 'session_token_secret_key'
  s3TemporaryBucket = 'session_token_bucket'
  s3TemporaryBasePath = 'session_token_base_path'
  s3TemporarySessionToken = 'session_token'

} else if (!s3TemporaryAccessKey || !s3TemporarySecretKey || !s3TemporaryBucket || !s3TemporaryBasePath || !s3TemporarySessionToken) {
  throw new IllegalArgumentException("not all options specified to run against external S3 service as temporary credentials are present")
}

if (!s3EC2Bucket && !s3EC2BasePath && !s3ECSBucket && !s3ECSBasePath) {
  s3EC2Bucket = 'ec2_bucket'
  s3EC2BasePath = 'ec2_base_path'
  s3ECSBucket = 'ecs_bucket'
  s3ECSBasePath = 'ecs_base_path'
} else if (!s3EC2Bucket || !s3EC2BasePath || !s3ECSBucket || !s3ECSBasePath) {
  throw new IllegalArgumentException("not all options specified to run EC2/ECS tests are present")
}

if (!s3STSBucket && !s3STSBasePath) {
  s3STSBucket = 'sts_bucket'
  s3STSBasePath = 'sts_base_path'
} else if (!s3STSBucket || !s3STSBasePath) {
  throw new IllegalArgumentException("not all options specified to run STS tests are present")
}

tasks.named("processYamlRestTestResources").configure {
  from("src/test/resources") {
    include "aws-web-identity-token-file"
  }
  Map<String, Object> expansions = [
    'permanent_bucket'        : s3PermanentBucket,
    'permanent_base_path'     : s3PermanentBasePath + "_integration_tests",
    'temporary_bucket'        : s3TemporaryBucket,
    'temporary_base_path'     : s3TemporaryBasePath + "_integration_tests",
    'ec2_bucket'              : s3EC2Bucket,
    'ec2_base_path'           : s3EC2BasePath,
    'ecs_bucket'              : s3ECSBucket,
    'ecs_base_path'           : s3ECSBasePath,
    'sts_bucket'              : s3STSBucket,
    'sts_base_path'           : s3STSBasePath,
    'disable_chunked_encoding': s3DisableChunkedEncoding
  ]
  inputs.properties(expansions)
  filter("tokens" : expansions.collectEntries {k, v -> [k, v.toString()]} /* must be a map of strings */, ReplaceTokens.class)
}

tasks.named("internalClusterTest").configure {
  // this is tested explicitly in a separate test task
  exclude '**/S3RepositoryThirdPartyTests.class'
  // TODO: check
  systemProperty "tests.security.manager", "false"

}

tasks.named("yamlRestTest").configure {
  fixtureApps.use("s3-fixture", "s3-fixture")
  fixtureApps.use("s3-fixture", "s3-fixture-with-session-token")
  fixtureApps.use("s3-fixture", "s3-fixture-with-ec2")

  systemProperty("fixture.service.name.1", "S3Fixture")
  systemProperty("fixture.service.name.2", "S3FixtureEcs")
  systemProperty("fixture.service.name.3", "S3FixtureEc2")
  systemProperty("fixture.service.name.4", "S3FixtureWithToken")

  systemProperty("tests.s3.fixture", Boolean.toString(useFixture))
  systemProperty("TESTCONTAINERS_RYUK_DISABLED", 'true')
  systemProperty("TESTCONTAINERS_CHECKS_DISABLE", 'true')
  systemProperty("s3PermanentAccessKey", s3PermanentAccessKey)
  systemProperty("s3PermanentSecretKey", s3PermanentSecretKey)
  systemProperty("s3TemporaryAccessKey", s3TemporaryAccessKey)
  systemProperty("s3TemporarySecretKey", s3TemporarySecretKey)
  systemProperty("s3EC2AccessKey", s3PermanentAccessKey)
  systemProperty 'tests.rest.blacklist', (
      useFixture ?
        ['repository_s3/50_repository_ecs_credentials/*',
         'repository_s3/60_repository_sts_credentials/*']
        :
        [
          'repository_s3/30_repository_temporary_credentials/*',
          'repository_s3/40_repository_ec2_credentials/*',
          'repository_s3/50_repository_ecs_credentials/*',
          'repository_s3/60_repository_sts_credentials/*'
        ]
    ).join(",")
}

if (useFixture) {
  normalization {
    runtimeClasspath {
      // ignore generated address file for the purposes of build avoidance
      ignore 's3Fixture.address'
    }
  }
}

if (useFixture) {
  // MinIO
  tasks.register("yamlRestTestMinio", RestIntegTestTask) {
    fixtureApps.use("minio-fixture", "minio-fixture")

    description = "Runs REST tests using the Minio repository."
    // Minio only supports a single access key, see https://github.com/minio/minio/pull/5968
    systemProperty("s3PermanentAccessKey", s3PermanentAccessKey)
    systemProperty("s3PermanentSecretKey", s3PermanentSecretKey)

    systemProperty 'tests.rest.blacklist', [
      'repository_s3/30_repository_temporary_credentials/*',
      'repository_s3/40_repository_ec2_credentials/*',
      'repository_s3/50_repository_ecs_credentials/*',
      'repository_s3/60_repository_sts_credentials/*'
    ].join(",")
  }

  // ECS
  tasks.register("yamlRestTestECS", RestIntegTestTask.class) {
    description = "Runs tests using the ECS repository."
    fixtureApps.use("s3-fixture", 's3-fixture-with-ecs')
    systemProperty 'tests.rest.blacklist', [
      'repository_s3/10_basic/*',
      'repository_s3/20_repository_permanent_credentials/*',
      'repository_s3/30_repository_temporary_credentials/*',
      'repository_s3/40_repository_ec2_credentials/*',
      'repository_s3/60_repository_sts_credentials/*'
    ].join(",")
  }

  // STS (Secure Token Service)
  tasks.register("yamlRestTestSTS", RestIntegTestTask.class) {
    description = "Runs tests with the STS (Secure Token Service)"
    fixtureApps.use("s3-fixture", 's3-fixture-with-sts')
    File awsWebIdentityTokenExternalLocation = file('src/test/resources/aws-web-identity-token-file')
    // The web identity token can be read only from the plugin config directory because of security restrictions
    // Ideally we would create a symlink, but extraConfigFile doesn't support it
    nonInputProperties.systemProperty("awsWebIdentityTokenExternalLocation", awsWebIdentityTokenExternalLocation.getAbsolutePath())
    systemProperty 'tests.rest.blacklist', [
      'repository_s3/10_basic/*',
      'repository_s3/20_repository_permanent_credentials/*',
      'repository_s3/30_repository_temporary_credentials/*',
      'repository_s3/40_repository_ec2_credentials/*',
      'repository_s3/50_repository_ecs_credentials/*'
    ].join(",")
  }
  
  // Sanity test for STS Regional Endpoints
  tasks.register("yamlRestTestRegionalSTS", RestIntegTestTask.class) {
    description = "Runs tests with the Regional STS Endpoint"
    systemProperty("tests.sts.regional", true)

    File awsWebIdentityTokenExternalLocation = file('src/test/resources/aws-web-identity-token-file')
    // The web identity token can be read only from the plugin config directory because of security restrictions
    // Ideally we would create a symlink, but extraConfigFile doesn't support it
    nonInputProperties.systemProperty("awsWebIdentityTokenExternalLocation", awsWebIdentityTokenExternalLocation.getAbsolutePath())

    // Run just the basic sanity test to make sure ES starts up and loads the S3 repository with
    // a regional endpoint without an error. It would be great to make actual requests against
    // a test fixture, but setting the region means using a production endpoint
    systemProperty 'tests.rest.blacklist', [
      'repository_s3/20_repository_permanent_credentials/*',
      'repository_s3/30_repository_temporary_credentials/*',
      'repository_s3/40_repository_ec2_credentials/*',
      'repository_s3/50_repository_ecs_credentials/*',
      'repository_s3/60_repository_sts_credentials/*'
    ].join(",")
  }
}

// 3rd Party Tests
tasks.register("s3ThirdPartyTest", Test) {
  fixtureApps.use("minio-fixture", "minio-fixture")
  SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);
  SourceSet internalTestSourceSet = sourceSets.getByName(InternalClusterTestPlugin.SOURCE_SET_NAME)
  setTestClassesDirs(internalTestSourceSet.getOutput().getClassesDirs())
  setClasspath(internalTestSourceSet.getRuntimeClasspath())
  include '**/S3RepositoryThirdPartyTests.class'
  // TODO: check
  systemProperty "tests.security.manager", "false"
  systemProperty 'test.s3.account', s3PermanentAccessKey
  systemProperty 'test.s3.key', s3PermanentSecretKey
  systemProperty 'test.s3.bucket', s3PermanentBucket
  nonInputProperties.systemProperty 'test.s3.base', s3PermanentBasePath + "_third_party_tests_" + BuildParams.testSeed
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
          // classes are missing
          'javax.servlet.ServletContextEvent',
          'javax.servlet.ServletContextListener',
          'org.apache.avalon.framework.logger.Logger',
          'org.apache.log.Hierarchy',
          'org.apache.log.Logger',
          'javax.jms.Message',
          'software.amazon.ion.IonReader',
          'software.amazon.ion.IonSystem',
          'software.amazon.ion.IonType',
          'software.amazon.ion.IonWriter',
          'software.amazon.ion.Timestamp',
          'software.amazon.ion.system.IonBinaryWriterBuilder',
          'software.amazon.ion.system.IonSystemBuilder',
          'software.amazon.ion.system.IonTextWriterBuilder',
          'software.amazon.ion.system.IonWriterBuilder',
          // We don't use the kms dependency
          'com.amazonaws.services.kms.AWSKMS',
          'com.amazonaws.services.kms.AWSKMSClient',
          'com.amazonaws.services.kms.AWSKMSClientBuilder',
          'com.amazonaws.services.kms.model.DecryptRequest',
          'com.amazonaws.services.kms.model.DecryptResult',
          'com.amazonaws.services.kms.model.EncryptRequest',
          'com.amazonaws.services.kms.model.EncryptResult',
          'com.amazonaws.services.kms.model.GenerateDataKeyRequest',
          'com.amazonaws.services.kms.model.GenerateDataKeyResult',
          'javax.activation.DataHandler'
  )
}

tasks.withType(RestIntegTestTask.class).configureEach {
  SourceSetContainer sourceSets = project.getExtensions().getByType(SourceSetContainer.class);
  SourceSet yamlRestTestSourceSet = sourceSets.getByName(LegacyYamlRestTestPlugin.SOURCE_SET_NAME)
  setTestClassesDirs(yamlRestTestSourceSet.getOutput().getClassesDirs())
  setClasspath(yamlRestTestSourceSet.getRuntimeClasspath())
}
tasks.named("check").configure {
  dependsOn(tasks.withType(Test))
}

